[{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/index.html","title":"API Reference","content":"AsyncSeq \nAsyncSeqExtensions \nAsyncSeqSrc \nSeq \nAsyncSeq<'T> \nAsyncSeqSrc<'T> \nIAsyncEnumerable<'T> \nIAsyncEnumerator<'T> \nAsyncSeqBuilder"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html","title":"AsyncSeq","content":"AsyncSeq \n \nAsyncSeq.AsyncSeqBuilder \nAsyncSeqBuilder \nAsyncSeq.empty \nempty \nAsyncSeq.singleton \nsingleton \nAsyncSeq.initAsync \ninitAsync \nAsyncSeq.init \ninit \nAsyncSeq.initInfiniteAsync \ninitInfiniteAsync \nAsyncSeq.initInfinite \ninitInfinite \nAsyncSeq.unfoldAsync \nunfoldAsync \nAsyncSeq.unfold \nunfold \nAsyncSeq.replicate \nreplicate \nAsyncSeq.replicateInfinite \nreplicateInfinite \nAsyncSeq.replicateInfiniteAsync \nreplicateInfiniteAsync \nAsyncSeq.replicateUntilNoneAsync \nreplicateUntilNoneAsync \nAsyncSeq.intervalMs \nintervalMs \nAsyncSeq.append \nappend \nAsyncSeq.collect \ncollect \nAsyncSeq.mapAsync \nmapAsync \nAsyncSeq.chooseAsync \nchooseAsync \nAsyncSeq.filterAsync \nfilterAsync \nAsyncSeq.lastOrDefault \nlastOrDefault \nAsyncSeq.tryLast \ntryLast \nAsyncSeq.firstOrDefault \nfirstOrDefault \nAsyncSeq.tryFirst \ntryFirst \nAsyncSeq.scanAsync \nscanAsync \nAsyncSeq.iterAsync \niterAsync \nAsyncSeq.iteriAsync \niteriAsync \nAsyncSeq.iterAsyncParallel \niterAsyncParallel \nAsyncSeq.iterAsyncParallelThrottled \niterAsyncParallelThrottled \nAsyncSeq.pairwise \npairwise \nAsyncSeq.foldAsync \nfoldAsync \nAsyncSeq.fold \nfold \nAsyncSeq.sum \nsum \nAsyncSeq.contains \ncontains \nAsyncSeq.tryPickAsync \ntryPickAsync \nAsyncSeq.tryPick \ntryPick \nAsyncSeq.pickAsync \npickAsync \nAsyncSeq.pick \npick \nAsyncSeq.tryFind \ntryFind \nAsyncSeq.exists \nexists \nAsyncSeq.forall \nforall \nAsyncSeq.indexed \nindexed \nAsyncSeq.length \nlength \nAsyncSeq.scan \nscan \nAsyncSeq.map \nmap \nAsyncSeq.iter \niter \nAsyncSeq.choose \nchoose \nAsyncSeq.filter \nfilter \nAsyncSeq.ofSeq \nofSeq \nAsyncSeq.ofSeqAsync \nofSeqAsync \nAsyncSeq.ofObservableBuffered \nofObservableBuffered \nAsyncSeq.ofObservable \nofObservable \nAsyncSeq.toObservable \ntoObservable \nAsyncSeq.toBlockingSeq \ntoBlockingSeq \nAsyncSeq.cache \ncache \nAsyncSeq.threadStateAsync \nthreadStateAsync \nAsyncSeq.zipWithAsync \nzipWithAsync \nAsyncSeq.zipWithAsyncParallel \nzipWithAsyncParallel \nAsyncSeq.zip \nzip \nAsyncSeq.zipParallel \nzipParallel \nAsyncSeq.zipWith \nzipWith \nAsyncSeq.zipWithParallel \nzipWithParallel \nAsyncSeq.mapiAsync \nmapiAsync \nAsyncSeq.mapi \nmapi \nAsyncSeq.zipWithIndexAsync \nzipWithIndexAsync \nAsyncSeq.zappAsync \nzappAsync \nAsyncSeq.zapp \nzapp \nAsyncSeq.combineLatestWithAsync \ncombineLatestWithAsync \nAsyncSeq.combineLatestWith \ncombineLatestWith \nAsyncSeq.combineLatest \ncombineLatest \nAsyncSeq.traverseOptionAsync \ntraverseOptionAsync \nAsyncSeq.traverseChoiceAsync \ntraverseChoiceAsync \nAsyncSeq.takeWhileAsync \ntakeWhileAsync \nAsyncSeq.takeUntilSignal \ntakeUntilSignal \nAsyncSeq.takeUntil \ntakeUntil \nAsyncSeq.skipWhileAsync \nskipWhileAsync \nAsyncSeq.skipUntilSignal \nskipUntilSignal \nAsyncSeq.skipUntil \nskipUntil \nAsyncSeq.takeWhile \ntakeWhile \nAsyncSeq.takeWhileInclusive \ntakeWhileInclusive \nAsyncSeq.skipWhile \nskipWhile \nAsyncSeq.take \ntake \nAsyncSeq.truncate \ntruncate \nAsyncSeq.skip \nskip \nAsyncSeq.toArrayAsync \ntoArrayAsync \nAsyncSeq.toListAsync \ntoListAsync \nAsyncSeq.toListSynchronously \ntoListSynchronously \nAsyncSeq.toArraySynchronously \ntoArraySynchronously \nAsyncSeq.concatSeq \nconcatSeq \nAsyncSeq.concat \nconcat \nAsyncSeq.interleave \ninterleave \nAsyncSeq.interleaveChoice \ninterleaveChoice \nAsyncSeq.bufferByCount \nbufferByCount \nAsyncSeq.bufferByCountAndTime \nbufferByCountAndTime \nAsyncSeq.bufferByTime \nbufferByTime \nAsyncSeq.mergeChoice \nmergeChoice \nAsyncSeq.merge \nmerge \nAsyncSeq.mergeAll \nmergeAll \nAsyncSeq.distinctUntilChangedWithAsync \ndistinctUntilChangedWithAsync \nAsyncSeq.distinctUntilChangedWith \ndistinctUntilChangedWith \nAsyncSeq.distinctUntilChanged \ndistinctUntilChanged \nAsyncSeq.getIterator \ngetIterator \nAsyncSeq.mapAsyncParallel \nmapAsyncParallel \nAsyncSeq.groupByAsync \ngroupByAsync \nAsyncSeq.groupBy \ngroupBy \nAsyncSeq.ofAsyncEnum \nofAsyncEnum \nAsyncSeq.toAsyncEnum \ntoAsyncEnum \nAsyncSeq.ofIQueryable \nofIQueryable"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#empty","title":"AsyncSeq.empty","content":"AsyncSeq.empty \nempty \n<p class='summary'>\n Creates an empty asynchronous sequence that immediately ends.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#singleton","title":"AsyncSeq.singleton","content":"AsyncSeq.singleton \nsingleton \n<p class='summary'>\n Creates an asynchronous sequence that generates a single element and then ends.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#initAsync","title":"AsyncSeq.initAsync","content":"AsyncSeq.initAsync \ninitAsync \n<p class='summary'>\n Generates a finite async sequence using the specified asynchronous initialization function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#init","title":"AsyncSeq.init","content":"AsyncSeq.init \ninit \n<p class='summary'>\n Generates a finite async sequence using the specified initialization function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#initInfiniteAsync","title":"AsyncSeq.initInfiniteAsync","content":"AsyncSeq.initInfiniteAsync \ninitInfiniteAsync \n<p class='summary'>\n Generates an infinite async sequence using the specified asynchronous initialization function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#initInfinite","title":"AsyncSeq.initInfinite","content":"AsyncSeq.initInfinite \ninitInfinite \n<p class='summary'>\n Generates an infinite async sequence using the specified initialization function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#unfoldAsync","title":"AsyncSeq.unfoldAsync","content":"AsyncSeq.unfoldAsync \nunfoldAsync \n<p class='summary'>\n Generates an async sequence using the specified asynchronous generator function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#unfold","title":"AsyncSeq.unfold","content":"AsyncSeq.unfold \nunfold \n<p class='summary'>\n Generates an async sequence using the specified generator function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#replicate","title":"AsyncSeq.replicate","content":"AsyncSeq.replicate \nreplicate \n<p class='summary'>\n Creates an async sequence which repeats the specified value the indicated number of times.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#replicateInfinite","title":"AsyncSeq.replicateInfinite","content":"AsyncSeq.replicateInfinite \nreplicateInfinite \n<p class='summary'>\n Creates an infinite async sequence which repeats the specified value.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#replicateInfiniteAsync","title":"AsyncSeq.replicateInfiniteAsync","content":"AsyncSeq.replicateInfiniteAsync \nreplicateInfiniteAsync \n<p class='summary'>\n Creates an infinite async sequence which repeatedly evaluates and emits the specified async value.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#replicateUntilNoneAsync","title":"AsyncSeq.replicateUntilNoneAsync","content":"AsyncSeq.replicateUntilNoneAsync \nreplicateUntilNoneAsync \n<p class='summary'>\n Creates an async sequence given by evaluating the specified async computation until it returns None.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#intervalMs","title":"AsyncSeq.intervalMs","content":"AsyncSeq.intervalMs \nintervalMs \n<p class='summary'>\n Returns an async sequence which emits an element on a specified period.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#append","title":"AsyncSeq.append","content":"AsyncSeq.append \nappend \n<p class='summary'>\n Yields all elements of the first asynchronous sequence and then\n all elements of the second asynchronous sequence.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#collect","title":"AsyncSeq.collect","content":"AsyncSeq.collect \ncollect \n<p class='summary'>\n Creates an asynchronous sequence that iterates over the given input sequence.\n For every input element, it calls the the specified function and iterates\n over all elements generated by that asynchronous sequence.\n This is the 'bind' operation of the computation expression (exposed using\n the 'for' keyword in asyncSeq computation).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mapAsync","title":"AsyncSeq.mapAsync","content":"AsyncSeq.mapAsync \nmapAsync \n<p class='summary'>\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#chooseAsync","title":"AsyncSeq.chooseAsync","content":"AsyncSeq.chooseAsync \nchooseAsync \n<p class='summary'>\n Asynchronously iterates over the input sequence and generates 'x' for\n every input element for which the specified asynchronous function\n returned 'Some(x)'\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#filterAsync","title":"AsyncSeq.filterAsync","content":"AsyncSeq.filterAsync \nfilterAsync \n<p class='summary'>\n Builds a new asynchronous sequence whose elements are those from the\n input sequence for which the specified function returned true.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#lastOrDefault","title":"AsyncSeq.lastOrDefault","content":"AsyncSeq.lastOrDefault \nlastOrDefault \n<p class='summary'>\n Asynchronously returns the last element that was generated by the\n given asynchronous sequence (or the specified default value).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#tryLast","title":"AsyncSeq.tryLast","content":"AsyncSeq.tryLast \ntryLast \n<p class='summary'>\n Asynchronously returns the last element that was generated by the\n given asynchronous sequence (or None if the sequence is empty).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#firstOrDefault","title":"AsyncSeq.firstOrDefault","content":"AsyncSeq.firstOrDefault \nfirstOrDefault \n<p class='summary'>\n Asynchronously returns the first element that was generated by the\n given asynchronous sequence (or the specified default value).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#tryFirst","title":"AsyncSeq.tryFirst","content":"AsyncSeq.tryFirst \ntryFirst \n<p class='summary'>\n Asynchronously returns the first element that was generated by the\n given asynchronous sequence (or None if the sequence is empty).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#scanAsync","title":"AsyncSeq.scanAsync","content":"AsyncSeq.scanAsync \nscanAsync \n<p class='summary'>\n Aggregates the elements of the input asynchronous sequence using the\n specified 'aggregation' function. The result is an asynchronous\n sequence of intermediate aggregation result.\n\n The aggregation function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#iterAsync","title":"AsyncSeq.iterAsync","content":"AsyncSeq.iterAsync \niterAsync \n<p class='summary'>\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. The input sequence will be asked for the next element after\n the processing of an element completes.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#iteriAsync","title":"AsyncSeq.iteriAsync","content":"AsyncSeq.iteriAsync \niteriAsync \n<p class='summary'>\n Iterates over the input sequence and calls the specified asynchronous function for\n every value, passing along the index of that element.\n The input sequence will be asked for the next element after the processing of an element completes.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#iterAsyncParallel","title":"AsyncSeq.iterAsyncParallel","content":"AsyncSeq.iterAsyncParallel \niterAsyncParallel \n<p class='summary'>\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. Each action computation is started but not awaited before consuming\n the next item from the sequence, thereby iterating in parallel.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#iterAsyncParallelThrottled","title":"AsyncSeq.iterAsyncParallelThrottled","content":"AsyncSeq.iterAsyncParallelThrottled \niterAsyncParallelThrottled \n<p class='summary'>\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. Each action computation is started but not awaited before consuming\n the next item from the sequence, thereby iterating in parallel with a specified degree of parallelism.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#pairwise","title":"AsyncSeq.pairwise","content":"AsyncSeq.pairwise \npairwise \n<p class='summary'>\n Returns an asynchronous sequence that returns pairs containing an element\n from the input sequence and its predecessor. Empty sequence is returned for\n singleton input sequence.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#foldAsync","title":"AsyncSeq.foldAsync","content":"AsyncSeq.foldAsync \nfoldAsync \n<p class='summary'>\n Asynchronously aggregate the elements of the input asynchronous sequence using the\n specified asynchronous 'aggregation' function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#fold","title":"AsyncSeq.fold","content":"AsyncSeq.fold \nfold \n<p class='summary'>\n Asynchronously aggregate the elements of the input asynchronous sequence using the\n specified 'aggregation' function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#sum","title":"AsyncSeq.sum","content":"AsyncSeq.sum \nsum \n<p class='summary'>\n Asynchronously sum the elements of the input asynchronous sequence using the specified function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#contains","title":"AsyncSeq.contains","content":"AsyncSeq.contains \ncontains \n<p class='summary'>\n Asynchronously determine if the sequence contains the given value\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#tryPickAsync","title":"AsyncSeq.tryPickAsync","content":"AsyncSeq.tryPickAsync \ntryPickAsync \n<p class='summary'>\n Asynchronously pick a value from a sequence based on the specified chooser function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#tryPick","title":"AsyncSeq.tryPick","content":"AsyncSeq.tryPick \ntryPick \n<p class='summary'>\n Asynchronously pick a value from a sequence based on the specified chooser function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#pickAsync","title":"AsyncSeq.pickAsync","content":"AsyncSeq.pickAsync \npickAsync \n<p class='summary'>\n Asynchronously pick a value from a sequence based on the specified chooser function.\n Raises KeyNotFoundException if the chooser function can't find a matching key.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#pick","title":"AsyncSeq.pick","content":"AsyncSeq.pick \npick \n<p class='summary'>\n Asynchronously pick a value from a sequence based on the specified chooser function.\n Raises KeyNotFoundException if the chooser function can't find a matching key.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#tryFind","title":"AsyncSeq.tryFind","content":"AsyncSeq.tryFind \ntryFind \n<p class='summary'>\n Asynchronously find the first value in a sequence for which the predicate returns true\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#exists","title":"AsyncSeq.exists","content":"AsyncSeq.exists \nexists \n<p class='summary'>\n Asynchronously determine if there is a value in the sequence for which the predicate returns true\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#forall","title":"AsyncSeq.forall","content":"AsyncSeq.forall \nforall \n<p class='summary'>\n Asynchronously determine if the predicate returns true for all values in the sequence\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#indexed","title":"AsyncSeq.indexed","content":"AsyncSeq.indexed \nindexed \n<p class='summary'>\n Return an asynchronous sequence which, when iterated, includes an integer indicating the index of each element in the sequence.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#length","title":"AsyncSeq.length","content":"AsyncSeq.length \nlength \n<p class='summary'>\n Asynchronously determine the number of elements in the sequence\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#scan","title":"AsyncSeq.scan","content":"AsyncSeq.scan \nscan \n<p class='summary'>\n Same as AsyncSeq.scanAsync, but the specified function is synchronous.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#map","title":"AsyncSeq.map","content":"AsyncSeq.map \nmap \n<p class='summary'>\n Same as AsyncSeq.mapAsync, but the specified function is synchronous.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#iter","title":"AsyncSeq.iter","content":"AsyncSeq.iter \niter \n<p class='summary'>\n Iterates over the input sequence and calls the specified function for\n every value.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#choose","title":"AsyncSeq.choose","content":"AsyncSeq.choose \nchoose \n<p class='summary'>\n Asynchronously iterates over the input sequence and generates 'x' for\n every input element for which the specified function\n returned 'Some(x)'\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#filter","title":"AsyncSeq.filter","content":"AsyncSeq.filter \nfilter \n<p class='summary'>\n Same as AsyncSeq.filterAsync, but the specified predicate is synchronous\n and processes the input element immediately.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofSeq","title":"AsyncSeq.ofSeq","content":"AsyncSeq.ofSeq \nofSeq \n<p class='summary'>\n Creates an asynchronous sequence that lazily takes element from an\n input synchronous sequence and returns them one-by-one.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofSeqAsync","title":"AsyncSeq.ofSeqAsync","content":"AsyncSeq.ofSeqAsync \nofSeqAsync \n<p class='summary'>\n Creates an asynchronous sequence that lazily takes element from an\n input synchronous sequence of asynchronous computation and returns them one-by-one.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofObservableBuffered","title":"AsyncSeq.ofObservableBuffered","content":"AsyncSeq.ofObservableBuffered \nofObservableBuffered \n<p class='summary'>\n Converts observable to an asynchronous sequence. Values that are produced\n by the observable while the asynchronous sequence is blocked are stored to\n an unbounded buffer and are returned as next elements of the async sequence.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofObservable","title":"AsyncSeq.ofObservable","content":"AsyncSeq.ofObservable \nofObservable \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toObservable","title":"AsyncSeq.toObservable","content":"AsyncSeq.toObservable \ntoObservable \n<p class='summary'>\n Converts asynchronous sequence to an IObservable<_>. When the client subscribes\n to the observable, a new copy of asynchronous sequence is started and is\n sequentially iterated over (at the maximal possible speed). Disposing of the\n observer cancels the iteration over asynchronous sequence.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toBlockingSeq","title":"AsyncSeq.toBlockingSeq","content":"AsyncSeq.toBlockingSeq \ntoBlockingSeq \n<p class='summary'>\n Converts asynchronous sequence to a synchronous blocking sequence.\n The elements of the asynchronous sequence are consumed lazily.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#cache","title":"AsyncSeq.cache","content":"AsyncSeq.cache \ncache \n<p class='summary'>\n Create a new asynchronous sequence that caches all elements of the\n sequence specified as the input. When accessing the resulting sequence\n multiple times, the input will still be evaluated only once\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#threadStateAsync","title":"AsyncSeq.threadStateAsync","content":"AsyncSeq.threadStateAsync \nthreadStateAsync \n<p class='summary'>\n Threads a state through the mapping over an async sequence using an async function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipWithAsync","title":"AsyncSeq.zipWithAsync","content":"AsyncSeq.zipWithAsync \nzipWithAsync \n<p class='summary'>\n Combines two asynchronous sequences using the specified function.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipWithAsyncParallel","title":"AsyncSeq.zipWithAsyncParallel","content":"AsyncSeq.zipWithAsyncParallel \nzipWithAsyncParallel \n<p class='summary'>\n Combines two asynchronous sequences using the specified function.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zip","title":"AsyncSeq.zip","content":"AsyncSeq.zip \nzip \n<p class='summary'>\n Combines two asynchronous sequences into a sequence of pairs.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipParallel","title":"AsyncSeq.zipParallel","content":"AsyncSeq.zipParallel \nzipParallel \n<p class='summary'>\n Combines two asynchronous sequences into a sequence of pairs.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipWith","title":"AsyncSeq.zipWith","content":"AsyncSeq.zipWith \nzipWith \n<p class='summary'>\n Combines two asynchronous sequences using the specified function.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipWithParallel","title":"AsyncSeq.zipWithParallel","content":"AsyncSeq.zipWithParallel \nzipWithParallel \n<p class='summary'>\n Combines two asynchronous sequences using the specified function.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mapiAsync","title":"AsyncSeq.mapiAsync","content":"AsyncSeq.mapiAsync \nmapiAsync \n<p class='summary'>\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mapi","title":"AsyncSeq.mapi","content":"AsyncSeq.mapi \nmapi \n<p class='summary'>\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is synchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zipWithIndexAsync","title":"AsyncSeq.zipWithIndexAsync","content":"AsyncSeq.zipWithIndexAsync \nzipWithIndexAsync \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zappAsync","title":"AsyncSeq.zappAsync","content":"AsyncSeq.zappAsync \nzappAsync \n<p class='summary'>\n Feeds an async sequence of values into an async sequence of async functions.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#zapp","title":"AsyncSeq.zapp","content":"AsyncSeq.zapp \nzapp \n<p class='summary'>\n Feeds an async sequence of values into an async sequence of functions.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#combineLatestWithAsync","title":"AsyncSeq.combineLatestWithAsync","content":"AsyncSeq.combineLatestWithAsync \ncombineLatestWithAsync \n<p class='summary'>\n Merges two async sequences using the specified combine function. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#combineLatestWith","title":"AsyncSeq.combineLatestWith","content":"AsyncSeq.combineLatestWith \ncombineLatestWith \n<p class='summary'>\n Merges two async sequences using the specified combine function. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#combineLatest","title":"AsyncSeq.combineLatest","content":"AsyncSeq.combineLatest \ncombineLatest \n<p class='summary'>\n Merges two async sequences. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#traverseOptionAsync","title":"AsyncSeq.traverseOptionAsync","content":"AsyncSeq.traverseOptionAsync \ntraverseOptionAsync \n<p class='summary'>\n Traverses an async sequence an applies to specified function such that if None is returned the traversal short-circuits\n and None is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Some.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#traverseChoiceAsync","title":"AsyncSeq.traverseChoiceAsync","content":"AsyncSeq.traverseChoiceAsync \ntraverseChoiceAsync \n<p class='summary'>\n Traverses an async sequence an applies to specified function such that if Choice2Of2 is returned the traversal short-circuits\n and Choice2Of2 is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Choice1Of2.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#takeWhileAsync","title":"AsyncSeq.takeWhileAsync","content":"AsyncSeq.takeWhileAsync \ntakeWhileAsync \n<p class='summary'>\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated asynchronously.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#takeUntilSignal","title":"AsyncSeq.takeUntilSignal","content":"AsyncSeq.takeUntilSignal \ntakeUntilSignal \n<p class='summary'>\n Returns elements from the argument async sequence until the specified signal completes or\n the sequences completes.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#takeUntil","title":"AsyncSeq.takeUntil","content":"AsyncSeq.takeUntil \ntakeUntil \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#skipWhileAsync","title":"AsyncSeq.skipWhileAsync","content":"AsyncSeq.skipWhileAsync \nskipWhileAsync \n<p class='summary'>\n Skips elements from an asynchronous sequence while the specified\n predicate holds and then returns the rest of the sequence. The\n predicate is evaluated asynchronously.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#skipUntilSignal","title":"AsyncSeq.skipUntilSignal","content":"AsyncSeq.skipUntilSignal \nskipUntilSignal \n<p class='summary'>\n Skips elements from an async sequence until the specified signal completes.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#skipUntil","title":"AsyncSeq.skipUntil","content":"AsyncSeq.skipUntil \nskipUntil \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#takeWhile","title":"AsyncSeq.takeWhile","content":"AsyncSeq.takeWhile \ntakeWhile \n<p class='summary'>\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated synchronously.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#takeWhileInclusive","title":"AsyncSeq.takeWhileInclusive","content":"AsyncSeq.takeWhileInclusive \ntakeWhileInclusive \n<p class='summary'>\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated synchronously.\n Does return the first element that predicate fails\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#skipWhile","title":"AsyncSeq.skipWhile","content":"AsyncSeq.skipWhile \nskipWhile \n<p class='summary'>\n Skips elements from an asynchronous sequence while the specified\n predicate holds and then returns the rest of the sequence. The\n predicate is evaluated asynchronously.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#take","title":"AsyncSeq.take","content":"AsyncSeq.take \ntake \n<p class='summary'>\n Returns the first N elements of an asynchronous sequence\n does not cast an exception if count is larger than the sequence length.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#truncate","title":"AsyncSeq.truncate","content":"AsyncSeq.truncate \ntruncate \n<p class='summary'>\n Alias for take\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#skip","title":"AsyncSeq.skip","content":"AsyncSeq.skip \nskip \n<p class='summary'>\n Skips the first N elements of an asynchronous sequence and\n then returns the rest of the sequence unmodified.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toArrayAsync","title":"AsyncSeq.toArrayAsync","content":"AsyncSeq.toArrayAsync \ntoArrayAsync \n<p class='summary'>\n Creates an async computation which iterates the AsyncSeq and collects the output into an array.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toListAsync","title":"AsyncSeq.toListAsync","content":"AsyncSeq.toListAsync \ntoListAsync \n<p class='summary'>\n Creates an async computation which iterates the AsyncSeq and collects the output into a list.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toListSynchronously","title":"AsyncSeq.toListSynchronously","content":"AsyncSeq.toListSynchronously \ntoListSynchronously \n<p class='summary'>\n Synchronously iterates the AsyncSeq and collects the output into a list.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toArraySynchronously","title":"AsyncSeq.toArraySynchronously","content":"AsyncSeq.toArraySynchronously \ntoArraySynchronously \n<p class='summary'>\n Synchronously iterates the AsyncSeq and collects the output into an array.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#concatSeq","title":"AsyncSeq.concatSeq","content":"AsyncSeq.concatSeq \nconcatSeq \n<p class='summary'>\n Flattens an AsyncSeq of synchronous sequences.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#concat","title":"AsyncSeq.concat","content":"AsyncSeq.concat \nconcat \n<p class='summary'>\n Flattens an AsyncSeq of asynchronous sequences.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#interleave","title":"AsyncSeq.interleave","content":"AsyncSeq.interleave \ninterleave \n<p class='summary'>\n Interleaves two async sequences of the same type into a resulting sequence. The provided\n sequences are consumed in lock-step.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#interleaveChoice","title":"AsyncSeq.interleaveChoice","content":"AsyncSeq.interleaveChoice \ninterleaveChoice \n<p class='summary'>\n Interleaves two async sequences into a resulting sequence. The provided\n sequences are consumed in lock-step.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#bufferByCount","title":"AsyncSeq.bufferByCount","content":"AsyncSeq.bufferByCount \nbufferByCount \n<p class='summary'>\n Buffer items from the async sequence into buffers of a specified size.\n The last buffer returned may be less than the specified buffer size.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#bufferByCountAndTime","title":"AsyncSeq.bufferByCountAndTime","content":"AsyncSeq.bufferByCountAndTime \nbufferByCountAndTime \n<p class='summary'>\n Buffer items from the async sequence until a specified buffer size is reached or a specified amount of time is elapsed.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#bufferByTime","title":"AsyncSeq.bufferByTime","content":"AsyncSeq.bufferByTime \nbufferByTime \n<p class='summary'>\n Buffers items from the async sequence by the specified time interval.\n If no items are received in an intervel and empty array is emitted.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mergeChoice","title":"AsyncSeq.mergeChoice","content":"AsyncSeq.mergeChoice \nmergeChoice \n<p class='summary'>\n Merges two async sequences into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#merge","title":"AsyncSeq.merge","content":"AsyncSeq.merge \nmerge \n<p class='summary'>\n Merges two async sequences of the same type into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mergeAll","title":"AsyncSeq.mergeAll","content":"AsyncSeq.mergeAll \nmergeAll \n<p class='summary'>\n Merges all specified async sequences into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#distinctUntilChangedWithAsync","title":"AsyncSeq.distinctUntilChangedWithAsync","content":"AsyncSeq.distinctUntilChangedWithAsync \ndistinctUntilChangedWithAsync \n<p class='summary'>\n Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#distinctUntilChangedWith","title":"AsyncSeq.distinctUntilChangedWith","content":"AsyncSeq.distinctUntilChangedWith \ndistinctUntilChangedWith \n<p class='summary'>\n Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#distinctUntilChanged","title":"AsyncSeq.distinctUntilChanged","content":"AsyncSeq.distinctUntilChanged \ndistinctUntilChanged \n<p class='summary'>\n Returns an async sequence which contains no contiguous duplicate elements.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#getIterator","title":"AsyncSeq.getIterator","content":"AsyncSeq.getIterator \ngetIterator \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#mapAsyncParallel","title":"AsyncSeq.mapAsyncParallel","content":"AsyncSeq.mapAsyncParallel \nmapAsyncParallel \n<p class='summary'>\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The function is applied to elements in order and results are emitted in order,\n but in parallel, without waiting for a prior mapping operation to complete.\n Parallelism is bound by the ThreadPool.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#groupByAsync","title":"AsyncSeq.groupByAsync","content":"AsyncSeq.groupByAsync \ngroupByAsync \n<p class='summary'>\n Applies a key-generating function to each element and returns an async sequence containing unique keys\n and async sequences containing elements corresponding to the key.\n\n Note that the resulting async sequence has to be processed in parallel (e.g AsyncSeq.mapAsyncParallel) becaused\n completion of sub-sequences depends on completion of other sub-sequences.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#groupBy","title":"AsyncSeq.groupBy","content":"AsyncSeq.groupBy \ngroupBy \n<p class='summary'>\n Applies a key-generating function to each element and returns an async sequence containing unique keys\n and async sequences containing elements corresponding to the key.\n\n Note that the resulting async sequence has to be processed in parallel (e.g AsyncSeq.mapAsyncParallel) becaused\n completion of sub-sequences depends on completion of other sub-sequences.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofAsyncEnum","title":"AsyncSeq.ofAsyncEnum","content":"AsyncSeq.ofAsyncEnum \nofAsyncEnum \n<p class='summary'>\n Creates an asynchronous computation that asynchronously yields results from the provided .NET IAsyncEnumerable.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#toAsyncEnum","title":"AsyncSeq.toAsyncEnum","content":"AsyncSeq.toAsyncEnum \ntoAsyncEnum \n<p class='summary'>\n Creates an .NET IAsyncEnumerable from the provided AsyncSeq computation.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq.html#ofIQueryable","title":"AsyncSeq.ofIQueryable","content":"AsyncSeq.ofIQueryable \nofIQueryable \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqextensions.html","title":"AsyncSeqExtensions","content":"AsyncSeqExtensions \n<p class='summary'>\n An automatically-opened module that contains the `asyncSeq` builder and an extension method\n</p> \nAsyncSeqExtensions.asyncSeq \nasyncSeq \nAsyncSeqExtensions.For \nFor"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqextensions.html#asyncSeq","title":"AsyncSeqExtensions.asyncSeq","content":"AsyncSeqExtensions.asyncSeq \nasyncSeq \n<p class='summary'>\n Builds an asynchronous sequence using the computation builder syntax\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html","title":"AsyncSeqSrc","content":"AsyncSeqSrc \n<p class='summary'>\n Operations on async sequence sources.\n</p> \nAsyncSeqSrc.create \ncreate \nAsyncSeqSrc.put \nput \nAsyncSeqSrc.close \nclose \nAsyncSeqSrc.error \nerror \nAsyncSeqSrc.toAsyncSeq \ntoAsyncSeq"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html#create","title":"AsyncSeqSrc.create","content":"AsyncSeqSrc.create \ncreate \n<p class='summary'>\n Creates a new async sequence source.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html#put","title":"AsyncSeqSrc.put","content":"AsyncSeqSrc.put \nput \n<p class='summary'>\n Causes any async sequences created before the call to yield the item.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html#close","title":"AsyncSeqSrc.close","content":"AsyncSeqSrc.close \nclose \n<p class='summary'>\n Closes the async sequence source casuing any created async sequences to complete.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html#error","title":"AsyncSeqSrc.error","content":"AsyncSeqSrc.error \nerror \n<p class='summary'>\n Causes async sequence created before the call to raise an exception.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc.html#toAsyncSeq","title":"AsyncSeqSrc.toAsyncSeq","content":"AsyncSeqSrc.toAsyncSeq \ntoAsyncSeq \n<p class='summary'>\n Creates an async sequence which yields values as they are put into the source and terminates\n when the source is closed. This sequence will yield items starting with the next put.\n Many async sequences can be created from once source.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-seq.html","title":"Seq","content":"Seq \n \nSeq.ofAsyncSeq \nofAsyncSeq"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-seq.html#ofAsyncSeq","title":"Seq.ofAsyncSeq","content":"Seq.ofAsyncSeq \nofAsyncSeq \n<p class='summary'>\n Converts asynchronous sequence to a synchronous blocking sequence.\n The elements of the asynchronous sequence are consumed lazily.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-1.html","title":"AsyncSeq<'T>","content":"AsyncSeq<'T> \n<p class='summary'>\n An asynchronous sequence represents a delayed computation that can be\n started to give an enumerator for pulling results asynchronously\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseqsrc-1.html","title":"AsyncSeqSrc<'T>","content":"AsyncSeqSrc<'T> \n<p class='summary'>\n An async sequence source produces async sequences.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-iasyncenumerable-1.html","title":"IAsyncEnumerable<'T>","content":"IAsyncEnumerable<'T> \n<p class='summary'>\n An asynchronous sequence represents a delayed computation that can be\n started to give an enumerator for pulling results asynchronously\n</p> \nIAsyncEnumerable<'T>.GetEnumerator \nGetEnumerator"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-iasyncenumerable-1.html#GetEnumerator","title":"IAsyncEnumerable<'T>.GetEnumerator","content":"IAsyncEnumerable<'T>.GetEnumerator \nGetEnumerator \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-iasyncenumerator-1.html","title":"IAsyncEnumerator<'T>","content":"IAsyncEnumerator<'T> \n<p class='summary'>\n An enumerator for pulling results asynchronously\n</p> \nIAsyncEnumerator<'T>.MoveNext \nMoveNext"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-iasyncenumerator-1.html#MoveNext","title":"IAsyncEnumerator<'T>.MoveNext","content":"IAsyncEnumerator<'T>.MoveNext \nMoveNext \n"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html","title":"AsyncSeqBuilder","content":"AsyncSeqBuilder \n<p class='summary'>\n Computation builder that allows creating of asynchronous\n sequences using the 'asyncSeq { ... }' syntax\n</p> \nAsyncSeqBuilder.( .ctor ) \n( .ctor ) \nAsyncSeqBuilder.Bind \nBind \nAsyncSeqBuilder.Combine \nCombine \nAsyncSeqBuilder.Delay \nDelay \nAsyncSeqBuilder.For \nFor \nAsyncSeqBuilder.For \nFor \nAsyncSeqBuilder.Return \nReturn \nAsyncSeqBuilder.TryFinally \nTryFinally \nAsyncSeqBuilder.TryWith \nTryWith \nAsyncSeqBuilder.Using \nUsing \nAsyncSeqBuilder.While \nWhile \nAsyncSeqBuilder.Yield \nYield \nAsyncSeqBuilder.YieldFrom \nYieldFrom \nAsyncSeqBuilder.Zero \nZero"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#( .ctor )","title":"AsyncSeqBuilder.( .ctor )","content":"AsyncSeqBuilder.( .ctor ) \n( .ctor ) \n<p class='summary'>\n Internal use only\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Bind","title":"AsyncSeqBuilder.Bind","content":"AsyncSeqBuilder.Bind \nBind \n<p class='summary'>\n Implements binding for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Combine","title":"AsyncSeqBuilder.Combine","content":"AsyncSeqBuilder.Combine \nCombine \n<p class='summary'>\n Implements sequential composition for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Delay","title":"AsyncSeqBuilder.Delay","content":"AsyncSeqBuilder.Delay \nDelay \n<p class='summary'>\n Implements delay for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#For","title":"AsyncSeqBuilder.For","content":"AsyncSeqBuilder.For \nFor \n<p class='summary'>\n Implements \"for\" loops for the asyncSeq computation builder.\n\n Asynchronous for loop - for all elements from the input sequence,\n generate all elements produced by the body (asynchronously). See\n also the AsyncSeq.collect function.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#For","title":"AsyncSeqBuilder.For","content":"AsyncSeqBuilder.For \nFor \n<p class='summary'>\n For loop that iterates over a synchronous sequence (and generates\n all elements generated by the asynchronous body)\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Return","title":"AsyncSeqBuilder.Return","content":"AsyncSeqBuilder.Return \nReturn \n<p class='summary'>\n Implements \"return\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#TryFinally","title":"AsyncSeqBuilder.TryFinally","content":"AsyncSeqBuilder.TryFinally \nTryFinally \n<p class='summary'>\n Implements \"try-finally\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#TryWith","title":"AsyncSeqBuilder.TryWith","content":"AsyncSeqBuilder.TryWith \nTryWith \n<p class='summary'>\n Implements \"try-with\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Using","title":"AsyncSeqBuilder.Using","content":"AsyncSeqBuilder.Using \nUsing \n<p class='summary'>\n Implements \"use\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#While","title":"AsyncSeqBuilder.While","content":"AsyncSeqBuilder.While \nWhile \n<p class='summary'>\n Implements \"while\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Yield","title":"AsyncSeqBuilder.Yield","content":"AsyncSeqBuilder.Yield \nYield \n<p class='summary'>\n Implements \"yield\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#YieldFrom","title":"AsyncSeqBuilder.YieldFrom","content":"AsyncSeqBuilder.YieldFrom \nYieldFrom \n<p class='summary'>\n Implements \"yield!\" for the asyncSeq computation builder.\n</p>"},{"uri":"http://fsprojects.github.io/FSharp.Control.AsyncSeq//reference/fsharp-control-asyncseq-asyncseqbuilder.html#Zero","title":"AsyncSeqBuilder.Zero","content":"AsyncSeqBuilder.Zero \nZero \n<p class='summary'>\n Implements empty for the asyncSeq computation builder.\n</p>"}]